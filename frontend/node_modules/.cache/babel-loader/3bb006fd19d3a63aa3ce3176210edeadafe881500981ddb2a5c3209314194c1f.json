{"ast":null,"code":"let currentDayTime = new Date().getTime();\nconst endDay = new Date();\nendDay.setDate(endDay.getDate() + 9);\nexport const TimerLogic = eventDate => {\n  const currentDayTime = new Date().getTime(); // Get the current time each time the function is called\n  const endDayTime = new Date(eventDate).getTime(); // Convert the provided event date to a time in milliseconds\n\n  const totalRemaining = endDayTime - currentDayTime;\n  if (totalRemaining <= 0) {\n    return false; // If the event time has passed, return false\n  }\n  const days = Math.floor(totalRemaining / (1000 * 60 * 60 * 24));\n  const hours = Math.floor(totalRemaining / (1000 * 60 * 60) % 24);\n  const minutes = Math.floor(totalRemaining / (1000 * 60) % 60);\n  const seconds = Math.floor(totalRemaining / 1000 % 60);\n  return [days, hours, minutes, seconds];\n};\n_c = TimerLogic;\nvar _c;\n$RefreshReg$(_c, \"TimerLogic\");","map":{"version":3,"names":["currentDayTime","Date","getTime","endDay","setDate","getDate","TimerLogic","eventDate","endDayTime","totalRemaining","days","Math","floor","hours","minutes","seconds","_c","$RefreshReg$"],"sources":["/Users/angelinemarcellelukito/Documents/GitHub/TTP/src/components/TimerLogic.js"],"sourcesContent":["let currentDayTime = new Date().getTime()\nconst endDay = new Date()\nendDay.setDate(endDay.getDate() + 9)\n\nexport const TimerLogic = (eventDate) => {\n    const currentDayTime = new Date().getTime(); // Get the current time each time the function is called\n    const endDayTime = new Date(eventDate).getTime(); // Convert the provided event date to a time in milliseconds\n\n    const totalRemaining = endDayTime - currentDayTime;\n\n    if (totalRemaining <= 0) {\n        return false; // If the event time has passed, return false\n    }\n\n    const days = Math.floor(totalRemaining / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((totalRemaining / (1000 * 60 * 60)) % 24);\n    const minutes = Math.floor((totalRemaining / (1000 * 60)) % 60);\n    const seconds = Math.floor((totalRemaining / 1000) % 60);\n\n    return [days, hours, minutes, seconds];\n}"],"mappings":"AAAA,IAAIA,cAAc,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;AACzC,MAAMC,MAAM,GAAG,IAAIF,IAAI,CAAC,CAAC;AACzBE,MAAM,CAACC,OAAO,CAACD,MAAM,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AAEpC,OAAO,MAAMC,UAAU,GAAIC,SAAS,IAAK;EACrC,MAAMP,cAAc,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;EAC7C,MAAMM,UAAU,GAAG,IAAIP,IAAI,CAACM,SAAS,CAAC,CAACL,OAAO,CAAC,CAAC,CAAC,CAAC;;EAElD,MAAMO,cAAc,GAAGD,UAAU,GAAGR,cAAc;EAElD,IAAIS,cAAc,IAAI,CAAC,EAAE;IACrB,OAAO,KAAK,CAAC,CAAC;EAClB;EAEA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,cAAc,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EAC/D,MAAMI,KAAK,GAAGF,IAAI,CAACC,KAAK,CAAEH,cAAc,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;EAClE,MAAMK,OAAO,GAAGH,IAAI,CAACC,KAAK,CAAEH,cAAc,IAAI,IAAI,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC;EAC/D,MAAMM,OAAO,GAAGJ,IAAI,CAACC,KAAK,CAAEH,cAAc,GAAG,IAAI,GAAI,EAAE,CAAC;EAExD,OAAO,CAACC,IAAI,EAAEG,KAAK,EAAEC,OAAO,EAAEC,OAAO,CAAC;AAC1C,CAAC;AAAAC,EAAA,GAhBYV,UAAU;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}